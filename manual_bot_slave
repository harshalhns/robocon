
/*
 * swerve module.c
 *
 * Created: 22-11-2018 11:34:09
 * Author : harshal
 */ 

#include <avr/io.h>
#define F_CPU 8000000UL
#include <util/delay.h>
#include <avr/interrupt.h>

#define wheel 1
#define display PORTC
#define clk 0x00
#define anti_clk 0x01
#define midpoint 512
#define tolerance 2

#define angle_45 379
#define angle_90 512
#define angle_135 625

volatile uint8_t spi_data=0,spi_flag=0,angle_data=127,config_data=0,config_bit=0,req_position=0;
volatile uint16_t cur_angle=0;                                                                                                                                                    
volatile uint16_t tar_angle=0,tar_m1=0,tar_m2=0;
uint16_t adc_val=0,correction=1023;
uint16_t pid=0;

float kp=3;
float ki=0.1;   //0.1
float kd=0.2;

void pwm_init()
{	
	TCCR1A = 0x83;
	TCCR1B = 0b00001010;
	OCR1A=0;
	TCCR0=0x02;
	TIMSK=(1<<TOIE0);
}
void pwm_set(uint16_t a)
{
	OCR1A=a;
}
void slave_init()
{	
	DDRB |= (1<<6);
	DDRB &= ~(1<<4 )|(1<<5) | (1<<7);
	SPCR = (1<<SPE)|(1<<SPIE);
}
uint16_t adc_read()
{
	ADCSRA |= (1<<ADSC);
	while(ADCSRA & (1<<ADSC));
	return ADC;
}
void adc_init()
{
	ADMUX |= (1<<REFS0);//|(1<<ADLAR);
	ADMUX &=0xF0;
	ADCSRA |= (1<<ADEN)|(1<<ADPS2)|(1<<ADPS1)|(1<<ADPS0);
	adc_read();
}
void calibration()
{	
	adc_val=adc_read();
	if(adc_val>midpoint) 
	correction +=(adc_val-midpoint);
	else 
	correction -=(midpoint-adc_val);
}
ISR(TIMER0_OVF_vect)
{
	cur_angle=correction-adc_read();
}
ISR(SPI_STC_vect)
{   
	angle_data=SPDR;
	PORTC=angle_data;
}
int main(void)
{   
  cli();
	DDRD=0xff;
	PORTD=0xff;
	DDRA=~(1<<0);
	DDRC=0xff;
	
	float error=0, eintegral=0,ederivative=0;
	
	adc_init();
	calibration();
	pwm_init();
	slave_init();
	
	sei();
	
	while(1)
	{	
      if (angle_data ==0) 
		     tar_angle=angle_45;   //1 3
		     // tar_angle=angle_135;  //0 2
    	else
          tar_angle=(angle_data*2)+255;
      tar_m1=tar_angle-tolerance;
      tar_m2=tar_angle+tolerance;
			if(tar_m2<cur_angle || tar_m1>cur_angle)
				{	
          if(tar_angle<cur_angle)
					{	
            PORTD=anti_clk;
						error=cur_angle-tar_angle;
					}
					else
					{	
            PORTD=clk;
						error=tar_angle-cur_angle;
					}
				
					pid=(uint16_t)((kp*error)+(ki*eintegral)+(kd*(error-ederivative)));
					if(pid>500) pid=500;
					pwm_set(pid);
					eintegral += error;
					ederivative=error;
					display=0xaa;
			  }
      else
        {
          PORTD=0xff;
          pwm_set(0);
          display=0xff;
          error=0;
          eintegral=0;
          ederivative=0;
        }
		}		
}

